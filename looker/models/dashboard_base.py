# coding: utf-8

"""
    Looker API 3.0 Reference

    ### Authorization  The Looker API uses Looker **API3** credentials for authorization and access control. Looker admins can create API3 credentials on Looker's **Admin/Users** page. Pass API3 credentials to the **/login** endpoint to obtain a temporary access_token. Include that access_token in the Authorization header of Looker API requests. For details, see [Looker API Authorization](https://looker.com/docs/r/api/authorization)  ### Client SDKs  The Looker API is a RESTful system that should be usable by any programming language capable of making HTTPS requests. Client SDKs for a variety of programming languages can be generated from the Looker API's Swagger JSON metadata to streamline use of the Looker API in your applications. A client SDK for Ruby is available as an example. For more information, see [Looker API Client SDKs](https://looker.com/docs/r/api/client_sdks)  ### Try It Out!  The 'api-docs' page served by the Looker instance includes 'Try It Out!' buttons for each API method. After logging in with API3 credentials, you can use the \"Try It Out!\" buttons to call the API directly from the documentation page to interactively explore API features and responses.  ### Versioning  Future releases of Looker will expand this API release-by-release to securely expose more and more of the core power of Looker to API client applications. API endpoints marked as \"beta\" may receive breaking changes without warning. Stable (non-beta) API endpoints should not receive breaking changes in future releases. For more information, see [Looker API Versioning](https://looker.com/docs/r/api/versioning)   # noqa: E501

    OpenAPI spec version: 3.0.0
    Contact: support@looker.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from looker.models.look_model import LookModel  # noqa: F401,E501
from looker.models.space_base import SpaceBase  # noqa: F401,E501


class DashboardBase(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'content_favorite_id': 'int',
        'content_metadata_id': 'int',
        'description': 'str',
        'hidden': 'bool',
        'id': 'str',
        'model': 'LookModel',
        'query_timezone': 'str',
        'readonly': 'bool',
        'refresh_interval': 'str',
        'refresh_interval_to_i': 'int',
        'space': 'SpaceBase',
        'title': 'str',
        'user_id': 'int',
        'can': 'dict(str, bool)'
    }

    attribute_map = {
        'content_favorite_id': 'content_favorite_id',
        'content_metadata_id': 'content_metadata_id',
        'description': 'description',
        'hidden': 'hidden',
        'id': 'id',
        'model': 'model',
        'query_timezone': 'query_timezone',
        'readonly': 'readonly',
        'refresh_interval': 'refresh_interval',
        'refresh_interval_to_i': 'refresh_interval_to_i',
        'space': 'space',
        'title': 'title',
        'user_id': 'user_id',
        'can': 'can'
    }

    def __init__(self, content_favorite_id=None, content_metadata_id=None, description=None, hidden=None, id=None, model=None, query_timezone=None, readonly=None, refresh_interval=None, refresh_interval_to_i=None, space=None, title=None, user_id=None, can=None):  # noqa: E501
        """DashboardBase - a model defined in Swagger"""  # noqa: E501
        self._content_favorite_id = None
        self._content_metadata_id = None
        self._description = None
        self._hidden = None
        self._id = None
        self._model = None
        self._query_timezone = None
        self._readonly = None
        self._refresh_interval = None
        self._refresh_interval_to_i = None
        self._space = None
        self._title = None
        self._user_id = None
        self._can = None
        self.discriminator = None
        if content_favorite_id is not None:
            self.content_favorite_id = content_favorite_id
        if content_metadata_id is not None:
            self.content_metadata_id = content_metadata_id
        if description is not None:
            self.description = description
        if hidden is not None:
            self.hidden = hidden
        if id is not None:
            self.id = id
        if model is not None:
            self.model = model
        if query_timezone is not None:
            self.query_timezone = query_timezone
        if readonly is not None:
            self.readonly = readonly
        if refresh_interval is not None:
            self.refresh_interval = refresh_interval
        if refresh_interval_to_i is not None:
            self.refresh_interval_to_i = refresh_interval_to_i
        if space is not None:
            self.space = space
        if title is not None:
            self.title = title
        if user_id is not None:
            self.user_id = user_id
        if can is not None:
            self.can = can

    @property
    def content_favorite_id(self):
        """Gets the content_favorite_id of this DashboardBase.  # noqa: E501

        Content Favorite Id  # noqa: E501

        :return: The content_favorite_id of this DashboardBase.  # noqa: E501
        :rtype: int
        """
        return self._content_favorite_id

    @content_favorite_id.setter
    def content_favorite_id(self, content_favorite_id):
        """Sets the content_favorite_id of this DashboardBase.

        Content Favorite Id  # noqa: E501

        :param content_favorite_id: The content_favorite_id of this DashboardBase.  # noqa: E501
        :type: int
        """

        self._content_favorite_id = content_favorite_id

    @property
    def content_metadata_id(self):
        """Gets the content_metadata_id of this DashboardBase.  # noqa: E501

        Id of content metadata  # noqa: E501

        :return: The content_metadata_id of this DashboardBase.  # noqa: E501
        :rtype: int
        """
        return self._content_metadata_id

    @content_metadata_id.setter
    def content_metadata_id(self, content_metadata_id):
        """Sets the content_metadata_id of this DashboardBase.

        Id of content metadata  # noqa: E501

        :param content_metadata_id: The content_metadata_id of this DashboardBase.  # noqa: E501
        :type: int
        """

        self._content_metadata_id = content_metadata_id

    @property
    def description(self):
        """Gets the description of this DashboardBase.  # noqa: E501

        Description  # noqa: E501

        :return: The description of this DashboardBase.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this DashboardBase.

        Description  # noqa: E501

        :param description: The description of this DashboardBase.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def hidden(self):
        """Gets the hidden of this DashboardBase.  # noqa: E501

        Is Hidden  # noqa: E501

        :return: The hidden of this DashboardBase.  # noqa: E501
        :rtype: bool
        """
        return self._hidden

    @hidden.setter
    def hidden(self, hidden):
        """Sets the hidden of this DashboardBase.

        Is Hidden  # noqa: E501

        :param hidden: The hidden of this DashboardBase.  # noqa: E501
        :type: bool
        """

        self._hidden = hidden

    @property
    def id(self):
        """Gets the id of this DashboardBase.  # noqa: E501

        Unique Id  # noqa: E501

        :return: The id of this DashboardBase.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this DashboardBase.

        Unique Id  # noqa: E501

        :param id: The id of this DashboardBase.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def model(self):
        """Gets the model of this DashboardBase.  # noqa: E501


        :return: The model of this DashboardBase.  # noqa: E501
        :rtype: LookModel
        """
        return self._model

    @model.setter
    def model(self, model):
        """Sets the model of this DashboardBase.


        :param model: The model of this DashboardBase.  # noqa: E501
        :type: LookModel
        """

        self._model = model

    @property
    def query_timezone(self):
        """Gets the query_timezone of this DashboardBase.  # noqa: E501

        Timezone in which the Dashboard will run by default.  # noqa: E501

        :return: The query_timezone of this DashboardBase.  # noqa: E501
        :rtype: str
        """
        return self._query_timezone

    @query_timezone.setter
    def query_timezone(self, query_timezone):
        """Sets the query_timezone of this DashboardBase.

        Timezone in which the Dashboard will run by default.  # noqa: E501

        :param query_timezone: The query_timezone of this DashboardBase.  # noqa: E501
        :type: str
        """

        self._query_timezone = query_timezone

    @property
    def readonly(self):
        """Gets the readonly of this DashboardBase.  # noqa: E501

        Is Read-only  # noqa: E501

        :return: The readonly of this DashboardBase.  # noqa: E501
        :rtype: bool
        """
        return self._readonly

    @readonly.setter
    def readonly(self, readonly):
        """Sets the readonly of this DashboardBase.

        Is Read-only  # noqa: E501

        :param readonly: The readonly of this DashboardBase.  # noqa: E501
        :type: bool
        """

        self._readonly = readonly

    @property
    def refresh_interval(self):
        """Gets the refresh_interval of this DashboardBase.  # noqa: E501

        Refresh Interval  # noqa: E501

        :return: The refresh_interval of this DashboardBase.  # noqa: E501
        :rtype: str
        """
        return self._refresh_interval

    @refresh_interval.setter
    def refresh_interval(self, refresh_interval):
        """Sets the refresh_interval of this DashboardBase.

        Refresh Interval  # noqa: E501

        :param refresh_interval: The refresh_interval of this DashboardBase.  # noqa: E501
        :type: str
        """

        self._refresh_interval = refresh_interval

    @property
    def refresh_interval_to_i(self):
        """Gets the refresh_interval_to_i of this DashboardBase.  # noqa: E501

        Refresh Interval as Integer  # noqa: E501

        :return: The refresh_interval_to_i of this DashboardBase.  # noqa: E501
        :rtype: int
        """
        return self._refresh_interval_to_i

    @refresh_interval_to_i.setter
    def refresh_interval_to_i(self, refresh_interval_to_i):
        """Sets the refresh_interval_to_i of this DashboardBase.

        Refresh Interval as Integer  # noqa: E501

        :param refresh_interval_to_i: The refresh_interval_to_i of this DashboardBase.  # noqa: E501
        :type: int
        """

        self._refresh_interval_to_i = refresh_interval_to_i

    @property
    def space(self):
        """Gets the space of this DashboardBase.  # noqa: E501


        :return: The space of this DashboardBase.  # noqa: E501
        :rtype: SpaceBase
        """
        return self._space

    @space.setter
    def space(self, space):
        """Sets the space of this DashboardBase.


        :param space: The space of this DashboardBase.  # noqa: E501
        :type: SpaceBase
        """

        self._space = space

    @property
    def title(self):
        """Gets the title of this DashboardBase.  # noqa: E501

        Dashboard Title  # noqa: E501

        :return: The title of this DashboardBase.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this DashboardBase.

        Dashboard Title  # noqa: E501

        :param title: The title of this DashboardBase.  # noqa: E501
        :type: str
        """

        self._title = title

    @property
    def user_id(self):
        """Gets the user_id of this DashboardBase.  # noqa: E501

        Id of User  # noqa: E501

        :return: The user_id of this DashboardBase.  # noqa: E501
        :rtype: int
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this DashboardBase.

        Id of User  # noqa: E501

        :param user_id: The user_id of this DashboardBase.  # noqa: E501
        :type: int
        """

        self._user_id = user_id

    @property
    def can(self):
        """Gets the can of this DashboardBase.  # noqa: E501

        Operations the current user is able to perform on this object  # noqa: E501

        :return: The can of this DashboardBase.  # noqa: E501
        :rtype: dict(str, bool)
        """
        return self._can

    @can.setter
    def can(self, can):
        """Sets the can of this DashboardBase.

        Operations the current user is able to perform on this object  # noqa: E501

        :param can: The can of this DashboardBase.  # noqa: E501
        :type: dict(str, bool)
        """

        self._can = can

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DashboardBase, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DashboardBase):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
