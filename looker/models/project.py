# coding: utf-8

"""
    Looker API 3.0 Reference

    ### Authorization  The Looker API uses Looker **API3** credentials for authorization and access control. Looker admins can create API3 credentials on Looker's **Admin/Users** page. Pass API3 credentials to the **/login** endpoint to obtain a temporary access_token. Include that access_token in the Authorization header of Looker API requests. For details, see [Looker API Authorization](https://looker.com/docs/r/api/authorization)  ### Client SDKs  The Looker API is a RESTful system that should be usable by any programming language capable of making HTTPS requests. Client SDKs for a variety of programming languages can be generated from the Looker API's Swagger JSON metadata to streamline use of the Looker API in your applications. A client SDK for Ruby is available as an example. For more information, see [Looker API Client SDKs](https://looker.com/docs/r/api/client_sdks)  ### Try It Out!  The 'api-docs' page served by the Looker instance includes 'Try It Out!' buttons for each API method. After logging in with API3 credentials, you can use the \"Try It Out!\" buttons to call the API directly from the documentation page to interactively explore API features and responses.  ### Versioning  Future releases of Looker will expand this API release-by-release to securely expose more and more of the core power of Looker to API client applications. API endpoints marked as \"beta\" may receive breaking changes without warning. Stable (non-beta) API endpoints should not receive breaking changes in future releases. For more information, see [Looker API Versioning](https://looker.com/docs/r/api/versioning)   # noqa: E501

    OpenAPI spec version: 3.0.0
    Contact: support@looker.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class Project(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'name': 'str',
        'uses_git': 'bool',
        'git_remote_url': 'str',
        'git_username': 'str',
        'git_password': 'str',
        'git_username_user_attribute': 'str',
        'git_password_user_attribute': 'str',
        'git_service_name': 'str',
        'deploy_secret': 'str',
        'unset_deploy_secret': 'bool',
        'pull_request_mode': 'str',
        'validation_required': 'bool',
        'allow_warnings': 'bool',
        'is_example': 'bool',
        'can': 'dict(str, bool)'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'uses_git': 'uses_git',
        'git_remote_url': 'git_remote_url',
        'git_username': 'git_username',
        'git_password': 'git_password',
        'git_username_user_attribute': 'git_username_user_attribute',
        'git_password_user_attribute': 'git_password_user_attribute',
        'git_service_name': 'git_service_name',
        'deploy_secret': 'deploy_secret',
        'unset_deploy_secret': 'unset_deploy_secret',
        'pull_request_mode': 'pull_request_mode',
        'validation_required': 'validation_required',
        'allow_warnings': 'allow_warnings',
        'is_example': 'is_example',
        'can': 'can'
    }

    def __init__(self, id=None, name=None, uses_git=None, git_remote_url=None, git_username=None, git_password=None, git_username_user_attribute=None, git_password_user_attribute=None, git_service_name=None, deploy_secret=None, unset_deploy_secret=None, pull_request_mode=None, validation_required=None, allow_warnings=None, is_example=None, can=None):  # noqa: E501
        """Project - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._name = None
        self._uses_git = None
        self._git_remote_url = None
        self._git_username = None
        self._git_password = None
        self._git_username_user_attribute = None
        self._git_password_user_attribute = None
        self._git_service_name = None
        self._deploy_secret = None
        self._unset_deploy_secret = None
        self._pull_request_mode = None
        self._validation_required = None
        self._allow_warnings = None
        self._is_example = None
        self._can = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if uses_git is not None:
            self.uses_git = uses_git
        if git_remote_url is not None:
            self.git_remote_url = git_remote_url
        if git_username is not None:
            self.git_username = git_username
        if git_password is not None:
            self.git_password = git_password
        if git_username_user_attribute is not None:
            self.git_username_user_attribute = git_username_user_attribute
        if git_password_user_attribute is not None:
            self.git_password_user_attribute = git_password_user_attribute
        if git_service_name is not None:
            self.git_service_name = git_service_name
        if deploy_secret is not None:
            self.deploy_secret = deploy_secret
        if unset_deploy_secret is not None:
            self.unset_deploy_secret = unset_deploy_secret
        if pull_request_mode is not None:
            self.pull_request_mode = pull_request_mode
        if validation_required is not None:
            self.validation_required = validation_required
        if allow_warnings is not None:
            self.allow_warnings = allow_warnings
        if is_example is not None:
            self.is_example = is_example
        if can is not None:
            self.can = can

    @property
    def id(self):
        """Gets the id of this Project.  # noqa: E501

        Project Id  # noqa: E501

        :return: The id of this Project.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Project.

        Project Id  # noqa: E501

        :param id: The id of this Project.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this Project.  # noqa: E501

        Project display name  # noqa: E501

        :return: The name of this Project.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Project.

        Project display name  # noqa: E501

        :param name: The name of this Project.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def uses_git(self):
        """Gets the uses_git of this Project.  # noqa: E501

        If true the project is configured with a git repository  # noqa: E501

        :return: The uses_git of this Project.  # noqa: E501
        :rtype: bool
        """
        return self._uses_git

    @uses_git.setter
    def uses_git(self, uses_git):
        """Sets the uses_git of this Project.

        If true the project is configured with a git repository  # noqa: E501

        :param uses_git: The uses_git of this Project.  # noqa: E501
        :type: bool
        """

        self._uses_git = uses_git

    @property
    def git_remote_url(self):
        """Gets the git_remote_url of this Project.  # noqa: E501

        Git remote repository url  # noqa: E501

        :return: The git_remote_url of this Project.  # noqa: E501
        :rtype: str
        """
        return self._git_remote_url

    @git_remote_url.setter
    def git_remote_url(self, git_remote_url):
        """Sets the git_remote_url of this Project.

        Git remote repository url  # noqa: E501

        :param git_remote_url: The git_remote_url of this Project.  # noqa: E501
        :type: str
        """

        self._git_remote_url = git_remote_url

    @property
    def git_username(self):
        """Gets the git_username of this Project.  # noqa: E501

        Git username for HTTPS authentication. (For production only, if using user attributes.)  # noqa: E501

        :return: The git_username of this Project.  # noqa: E501
        :rtype: str
        """
        return self._git_username

    @git_username.setter
    def git_username(self, git_username):
        """Sets the git_username of this Project.

        Git username for HTTPS authentication. (For production only, if using user attributes.)  # noqa: E501

        :param git_username: The git_username of this Project.  # noqa: E501
        :type: str
        """

        self._git_username = git_username

    @property
    def git_password(self):
        """Gets the git_password of this Project.  # noqa: E501

        (Write-Only) Git password for HTTPS authentication. (For production only, if using user attributes.)  # noqa: E501

        :return: The git_password of this Project.  # noqa: E501
        :rtype: str
        """
        return self._git_password

    @git_password.setter
    def git_password(self, git_password):
        """Sets the git_password of this Project.

        (Write-Only) Git password for HTTPS authentication. (For production only, if using user attributes.)  # noqa: E501

        :param git_password: The git_password of this Project.  # noqa: E501
        :type: str
        """

        self._git_password = git_password

    @property
    def git_username_user_attribute(self):
        """Gets the git_username_user_attribute of this Project.  # noqa: E501

        User attribute name for username in per-user HTTPS authentication.  # noqa: E501

        :return: The git_username_user_attribute of this Project.  # noqa: E501
        :rtype: str
        """
        return self._git_username_user_attribute

    @git_username_user_attribute.setter
    def git_username_user_attribute(self, git_username_user_attribute):
        """Sets the git_username_user_attribute of this Project.

        User attribute name for username in per-user HTTPS authentication.  # noqa: E501

        :param git_username_user_attribute: The git_username_user_attribute of this Project.  # noqa: E501
        :type: str
        """

        self._git_username_user_attribute = git_username_user_attribute

    @property
    def git_password_user_attribute(self):
        """Gets the git_password_user_attribute of this Project.  # noqa: E501

        User attribute name for password in per-user HTTPS authentication.  # noqa: E501

        :return: The git_password_user_attribute of this Project.  # noqa: E501
        :rtype: str
        """
        return self._git_password_user_attribute

    @git_password_user_attribute.setter
    def git_password_user_attribute(self, git_password_user_attribute):
        """Sets the git_password_user_attribute of this Project.

        User attribute name for password in per-user HTTPS authentication.  # noqa: E501

        :param git_password_user_attribute: The git_password_user_attribute of this Project.  # noqa: E501
        :type: str
        """

        self._git_password_user_attribute = git_password_user_attribute

    @property
    def git_service_name(self):
        """Gets the git_service_name of this Project.  # noqa: E501

        Name of the git service provider  # noqa: E501

        :return: The git_service_name of this Project.  # noqa: E501
        :rtype: str
        """
        return self._git_service_name

    @git_service_name.setter
    def git_service_name(self, git_service_name):
        """Sets the git_service_name of this Project.

        Name of the git service provider  # noqa: E501

        :param git_service_name: The git_service_name of this Project.  # noqa: E501
        :type: str
        """

        self._git_service_name = git_service_name

    @property
    def deploy_secret(self):
        """Gets the deploy_secret of this Project.  # noqa: E501

        (Write-Only) Optional secret token with which to authenticate requests to the webhook deploy endpoint. If not set, endpoint is unauthenticated.  # noqa: E501

        :return: The deploy_secret of this Project.  # noqa: E501
        :rtype: str
        """
        return self._deploy_secret

    @deploy_secret.setter
    def deploy_secret(self, deploy_secret):
        """Sets the deploy_secret of this Project.

        (Write-Only) Optional secret token with which to authenticate requests to the webhook deploy endpoint. If not set, endpoint is unauthenticated.  # noqa: E501

        :param deploy_secret: The deploy_secret of this Project.  # noqa: E501
        :type: str
        """

        self._deploy_secret = deploy_secret

    @property
    def unset_deploy_secret(self):
        """Gets the unset_deploy_secret of this Project.  # noqa: E501

        (Write-Only) When true, unsets the deploy secret to allow unauthenticated access to the webhook deploy endpoint.  # noqa: E501

        :return: The unset_deploy_secret of this Project.  # noqa: E501
        :rtype: bool
        """
        return self._unset_deploy_secret

    @unset_deploy_secret.setter
    def unset_deploy_secret(self, unset_deploy_secret):
        """Sets the unset_deploy_secret of this Project.

        (Write-Only) When true, unsets the deploy secret to allow unauthenticated access to the webhook deploy endpoint.  # noqa: E501

        :param unset_deploy_secret: The unset_deploy_secret of this Project.  # noqa: E501
        :type: bool
        """

        self._unset_deploy_secret = unset_deploy_secret

    @property
    def pull_request_mode(self):
        """Gets the pull_request_mode of this Project.  # noqa: E501

        The git pull request policy for this project. Valid values are: \"off\", \"links\", \"recommended\", \"required\".  # noqa: E501

        :return: The pull_request_mode of this Project.  # noqa: E501
        :rtype: str
        """
        return self._pull_request_mode

    @pull_request_mode.setter
    def pull_request_mode(self, pull_request_mode):
        """Sets the pull_request_mode of this Project.

        The git pull request policy for this project. Valid values are: \"off\", \"links\", \"recommended\", \"required\".  # noqa: E501

        :param pull_request_mode: The pull_request_mode of this Project.  # noqa: E501
        :type: str
        """

        self._pull_request_mode = pull_request_mode

    @property
    def validation_required(self):
        """Gets the validation_required of this Project.  # noqa: E501

        Validation policy: If true, the project must pass validation checks before project changes can be committed to the git repository  # noqa: E501

        :return: The validation_required of this Project.  # noqa: E501
        :rtype: bool
        """
        return self._validation_required

    @validation_required.setter
    def validation_required(self, validation_required):
        """Sets the validation_required of this Project.

        Validation policy: If true, the project must pass validation checks before project changes can be committed to the git repository  # noqa: E501

        :param validation_required: The validation_required of this Project.  # noqa: E501
        :type: bool
        """

        self._validation_required = validation_required

    @property
    def allow_warnings(self):
        """Gets the allow_warnings of this Project.  # noqa: E501

        Validation policy: If true, the project can be committed with warnings when `validation_required` is true. (`allow_warnings` does nothing if `validation_required` is false).  # noqa: E501

        :return: The allow_warnings of this Project.  # noqa: E501
        :rtype: bool
        """
        return self._allow_warnings

    @allow_warnings.setter
    def allow_warnings(self, allow_warnings):
        """Sets the allow_warnings of this Project.

        Validation policy: If true, the project can be committed with warnings when `validation_required` is true. (`allow_warnings` does nothing if `validation_required` is false).  # noqa: E501

        :param allow_warnings: The allow_warnings of this Project.  # noqa: E501
        :type: bool
        """

        self._allow_warnings = allow_warnings

    @property
    def is_example(self):
        """Gets the is_example of this Project.  # noqa: E501

        If true the project is an example project and cannot be modified  # noqa: E501

        :return: The is_example of this Project.  # noqa: E501
        :rtype: bool
        """
        return self._is_example

    @is_example.setter
    def is_example(self, is_example):
        """Sets the is_example of this Project.

        If true the project is an example project and cannot be modified  # noqa: E501

        :param is_example: The is_example of this Project.  # noqa: E501
        :type: bool
        """

        self._is_example = is_example

    @property
    def can(self):
        """Gets the can of this Project.  # noqa: E501

        Operations the current user is able to perform on this object  # noqa: E501

        :return: The can of this Project.  # noqa: E501
        :rtype: dict(str, bool)
        """
        return self._can

    @can.setter
    def can(self, can):
        """Sets the can of this Project.

        Operations the current user is able to perform on this object  # noqa: E501

        :param can: The can of this Project.  # noqa: E501
        :type: dict(str, bool)
        """

        self._can = can

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Project, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Project):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
