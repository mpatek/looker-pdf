# coding: utf-8

"""
    Looker API 3.0 Reference

    ### Authorization  The Looker API uses Looker **API3** credentials for authorization and access control. Looker admins can create API3 credentials on Looker's **Admin/Users** page. Pass API3 credentials to the **/login** endpoint to obtain a temporary access_token. Include that access_token in the Authorization header of Looker API requests. For details, see [Looker API Authorization](https://looker.com/docs/r/api/authorization)  ### Client SDKs  The Looker API is a RESTful system that should be usable by any programming language capable of making HTTPS requests. Client SDKs for a variety of programming languages can be generated from the Looker API's Swagger JSON metadata to streamline use of the Looker API in your applications. A client SDK for Ruby is available as an example. For more information, see [Looker API Client SDKs](https://looker.com/docs/r/api/client_sdks)  ### Try It Out!  The 'api-docs' page served by the Looker instance includes 'Try It Out!' buttons for each API method. After logging in with API3 credentials, you can use the \"Try It Out!\" buttons to call the API directly from the documentation page to interactively explore API features and responses.  ### Versioning  Future releases of Looker will expand this API release-by-release to securely expose more and more of the core power of Looker to API client applications. API endpoints marked as \"beta\" may receive breaking changes without warning. Stable (non-beta) API endpoints should not receive breaking changes in future releases. For more information, see [Looker API Versioning](https://looker.com/docs/r/api/versioning)   # noqa: E501

    OpenAPI spec version: 3.0.0
    Contact: support@looker.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from looker.models.homepage_item import HomepageItem  # noqa: F401,E501


class HomepageSection(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'created_at': 'datetime',
        'deleted_at': 'datetime',
        'detail_url': 'str',
        'homepage_id': 'int',
        'homepage_items': 'list[HomepageItem]',
        'id': 'str',
        'is_header': 'bool',
        'item_order': 'list[int]',
        'title': 'str',
        'updated_at': 'datetime',
        'can': 'dict(str, bool)'
    }

    attribute_map = {
        'created_at': 'created_at',
        'deleted_at': 'deleted_at',
        'detail_url': 'detail_url',
        'homepage_id': 'homepage_id',
        'homepage_items': 'homepage_items',
        'id': 'id',
        'is_header': 'is_header',
        'item_order': 'item_order',
        'title': 'title',
        'updated_at': 'updated_at',
        'can': 'can'
    }

    def __init__(self, created_at=None, deleted_at=None, detail_url=None, homepage_id=None, homepage_items=None, id=None, is_header=None, item_order=None, title=None, updated_at=None, can=None):  # noqa: E501
        """HomepageSection - a model defined in Swagger"""  # noqa: E501
        self._created_at = None
        self._deleted_at = None
        self._detail_url = None
        self._homepage_id = None
        self._homepage_items = None
        self._id = None
        self._is_header = None
        self._item_order = None
        self._title = None
        self._updated_at = None
        self._can = None
        self.discriminator = None
        if created_at is not None:
            self.created_at = created_at
        if deleted_at is not None:
            self.deleted_at = deleted_at
        if detail_url is not None:
            self.detail_url = detail_url
        if homepage_id is not None:
            self.homepage_id = homepage_id
        if homepage_items is not None:
            self.homepage_items = homepage_items
        if id is not None:
            self.id = id
        if is_header is not None:
            self.is_header = is_header
        if item_order is not None:
            self.item_order = item_order
        if title is not None:
            self.title = title
        if updated_at is not None:
            self.updated_at = updated_at
        if can is not None:
            self.can = can

    @property
    def created_at(self):
        """Gets the created_at of this HomepageSection.  # noqa: E501

        Time at which this section was created.  # noqa: E501

        :return: The created_at of this HomepageSection.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this HomepageSection.

        Time at which this section was created.  # noqa: E501

        :param created_at: The created_at of this HomepageSection.  # noqa: E501
        :type: datetime
        """

        self._created_at = created_at

    @property
    def deleted_at(self):
        """Gets the deleted_at of this HomepageSection.  # noqa: E501

        Time at which this section was deleted.  # noqa: E501

        :return: The deleted_at of this HomepageSection.  # noqa: E501
        :rtype: datetime
        """
        return self._deleted_at

    @deleted_at.setter
    def deleted_at(self, deleted_at):
        """Sets the deleted_at of this HomepageSection.

        Time at which this section was deleted.  # noqa: E501

        :param deleted_at: The deleted_at of this HomepageSection.  # noqa: E501
        :type: datetime
        """

        self._deleted_at = deleted_at

    @property
    def detail_url(self):
        """Gets the detail_url of this HomepageSection.  # noqa: E501

        A URL pointing to a page showing further information about the content in the section.  # noqa: E501

        :return: The detail_url of this HomepageSection.  # noqa: E501
        :rtype: str
        """
        return self._detail_url

    @detail_url.setter
    def detail_url(self, detail_url):
        """Sets the detail_url of this HomepageSection.

        A URL pointing to a page showing further information about the content in the section.  # noqa: E501

        :param detail_url: The detail_url of this HomepageSection.  # noqa: E501
        :type: str
        """

        self._detail_url = detail_url

    @property
    def homepage_id(self):
        """Gets the homepage_id of this HomepageSection.  # noqa: E501

        Id reference to parent homepage  # noqa: E501

        :return: The homepage_id of this HomepageSection.  # noqa: E501
        :rtype: int
        """
        return self._homepage_id

    @homepage_id.setter
    def homepage_id(self, homepage_id):
        """Sets the homepage_id of this HomepageSection.

        Id reference to parent homepage  # noqa: E501

        :param homepage_id: The homepage_id of this HomepageSection.  # noqa: E501
        :type: int
        """

        self._homepage_id = homepage_id

    @property
    def homepage_items(self):
        """Gets the homepage_items of this HomepageSection.  # noqa: E501

        Items in the homepage section  # noqa: E501

        :return: The homepage_items of this HomepageSection.  # noqa: E501
        :rtype: list[HomepageItem]
        """
        return self._homepage_items

    @homepage_items.setter
    def homepage_items(self, homepage_items):
        """Sets the homepage_items of this HomepageSection.

        Items in the homepage section  # noqa: E501

        :param homepage_items: The homepage_items of this HomepageSection.  # noqa: E501
        :type: list[HomepageItem]
        """

        self._homepage_items = homepage_items

    @property
    def id(self):
        """Gets the id of this HomepageSection.  # noqa: E501

        Unique Id  # noqa: E501

        :return: The id of this HomepageSection.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this HomepageSection.

        Unique Id  # noqa: E501

        :param id: The id of this HomepageSection.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def is_header(self):
        """Gets the is_header of this HomepageSection.  # noqa: E501

        Is this a header section (has no items)  # noqa: E501

        :return: The is_header of this HomepageSection.  # noqa: E501
        :rtype: bool
        """
        return self._is_header

    @is_header.setter
    def is_header(self, is_header):
        """Sets the is_header of this HomepageSection.

        Is this a header section (has no items)  # noqa: E501

        :param is_header: The is_header of this HomepageSection.  # noqa: E501
        :type: bool
        """

        self._is_header = is_header

    @property
    def item_order(self):
        """Gets the item_order of this HomepageSection.  # noqa: E501

        ids of the homepage items in the order they should be displayed  # noqa: E501

        :return: The item_order of this HomepageSection.  # noqa: E501
        :rtype: list[int]
        """
        return self._item_order

    @item_order.setter
    def item_order(self, item_order):
        """Sets the item_order of this HomepageSection.

        ids of the homepage items in the order they should be displayed  # noqa: E501

        :param item_order: The item_order of this HomepageSection.  # noqa: E501
        :type: list[int]
        """

        self._item_order = item_order

    @property
    def title(self):
        """Gets the title of this HomepageSection.  # noqa: E501

        Name of row  # noqa: E501

        :return: The title of this HomepageSection.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this HomepageSection.

        Name of row  # noqa: E501

        :param title: The title of this HomepageSection.  # noqa: E501
        :type: str
        """

        self._title = title

    @property
    def updated_at(self):
        """Gets the updated_at of this HomepageSection.  # noqa: E501

        Time at which this section was last updated.  # noqa: E501

        :return: The updated_at of this HomepageSection.  # noqa: E501
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this HomepageSection.

        Time at which this section was last updated.  # noqa: E501

        :param updated_at: The updated_at of this HomepageSection.  # noqa: E501
        :type: datetime
        """

        self._updated_at = updated_at

    @property
    def can(self):
        """Gets the can of this HomepageSection.  # noqa: E501

        Operations the current user is able to perform on this object  # noqa: E501

        :return: The can of this HomepageSection.  # noqa: E501
        :rtype: dict(str, bool)
        """
        return self._can

    @can.setter
    def can(self, can):
        """Sets the can of this HomepageSection.

        Operations the current user is able to perform on this object  # noqa: E501

        :param can: The can of this HomepageSection.  # noqa: E501
        :type: dict(str, bool)
        """

        self._can = can

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(HomepageSection, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, HomepageSection):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
