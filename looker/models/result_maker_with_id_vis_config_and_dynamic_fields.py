# coding: utf-8

"""
    Looker API 3.0 Reference

    ### Authorization  The Looker API uses Looker **API3** credentials for authorization and access control. Looker admins can create API3 credentials on Looker's **Admin/Users** page. Pass API3 credentials to the **/login** endpoint to obtain a temporary access_token. Include that access_token in the Authorization header of Looker API requests. For details, see [Looker API Authorization](https://looker.com/docs/r/api/authorization)  ### Client SDKs  The Looker API is a RESTful system that should be usable by any programming language capable of making HTTPS requests. Client SDKs for a variety of programming languages can be generated from the Looker API's Swagger JSON metadata to streamline use of the Looker API in your applications. A client SDK for Ruby is available as an example. For more information, see [Looker API Client SDKs](https://looker.com/docs/r/api/client_sdks)  ### Try It Out!  The 'api-docs' page served by the Looker instance includes 'Try It Out!' buttons for each API method. After logging in with API3 credentials, you can use the \"Try It Out!\" buttons to call the API directly from the documentation page to interactively explore API features and responses.  ### Versioning  Future releases of Looker will expand this API release-by-release to securely expose more and more of the core power of Looker to API client applications. API endpoints marked as \"beta\" may receive breaking changes without warning. Stable (non-beta) API endpoints should not receive breaking changes in future releases. For more information, see [Looker API Versioning](https://looker.com/docs/r/api/versioning)   # noqa: E501

    OpenAPI spec version: 3.0.0
    Contact: support@looker.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from looker.models.query import Query  # noqa: F401,E501
from looker.models.result_maker_filterables import ResultMakerFilterables  # noqa: F401,E501


class ResultMakerWithIdVisConfigAndDynamicFields(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'dynamic_fields': 'str',
        'filterables': 'list[ResultMakerFilterables]',
        'sorts': 'str',
        'merge_result_id': 'str',
        'total': 'bool',
        'query_id': 'int',
        'query': 'Query',
        'vis_config': 'str'
    }

    attribute_map = {
        'id': 'id',
        'dynamic_fields': 'dynamic_fields',
        'filterables': 'filterables',
        'sorts': 'sorts',
        'merge_result_id': 'merge_result_id',
        'total': 'total',
        'query_id': 'query_id',
        'query': 'query',
        'vis_config': 'vis_config'
    }

    def __init__(self, id=None, dynamic_fields=None, filterables=None, sorts=None, merge_result_id=None, total=None, query_id=None, query=None, vis_config=None):  # noqa: E501
        """ResultMakerWithIdVisConfigAndDynamicFields - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._dynamic_fields = None
        self._filterables = None
        self._sorts = None
        self._merge_result_id = None
        self._total = None
        self._query_id = None
        self._query = None
        self._vis_config = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if dynamic_fields is not None:
            self.dynamic_fields = dynamic_fields
        if filterables is not None:
            self.filterables = filterables
        if sorts is not None:
            self.sorts = sorts
        if merge_result_id is not None:
            self.merge_result_id = merge_result_id
        if total is not None:
            self.total = total
        if query_id is not None:
            self.query_id = query_id
        if query is not None:
            self.query = query
        if vis_config is not None:
            self.vis_config = vis_config

    @property
    def id(self):
        """Gets the id of this ResultMakerWithIdVisConfigAndDynamicFields.  # noqa: E501

        Unique Id.  # noqa: E501

        :return: The id of this ResultMakerWithIdVisConfigAndDynamicFields.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ResultMakerWithIdVisConfigAndDynamicFields.

        Unique Id.  # noqa: E501

        :param id: The id of this ResultMakerWithIdVisConfigAndDynamicFields.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def dynamic_fields(self):
        """Gets the dynamic_fields of this ResultMakerWithIdVisConfigAndDynamicFields.  # noqa: E501

        JSON string of dynamic field information.  # noqa: E501

        :return: The dynamic_fields of this ResultMakerWithIdVisConfigAndDynamicFields.  # noqa: E501
        :rtype: str
        """
        return self._dynamic_fields

    @dynamic_fields.setter
    def dynamic_fields(self, dynamic_fields):
        """Sets the dynamic_fields of this ResultMakerWithIdVisConfigAndDynamicFields.

        JSON string of dynamic field information.  # noqa: E501

        :param dynamic_fields: The dynamic_fields of this ResultMakerWithIdVisConfigAndDynamicFields.  # noqa: E501
        :type: str
        """

        self._dynamic_fields = dynamic_fields

    @property
    def filterables(self):
        """Gets the filterables of this ResultMakerWithIdVisConfigAndDynamicFields.  # noqa: E501

        array of items that can be filtered and information about them.  # noqa: E501

        :return: The filterables of this ResultMakerWithIdVisConfigAndDynamicFields.  # noqa: E501
        :rtype: list[ResultMakerFilterables]
        """
        return self._filterables

    @filterables.setter
    def filterables(self, filterables):
        """Sets the filterables of this ResultMakerWithIdVisConfigAndDynamicFields.

        array of items that can be filtered and information about them.  # noqa: E501

        :param filterables: The filterables of this ResultMakerWithIdVisConfigAndDynamicFields.  # noqa: E501
        :type: list[ResultMakerFilterables]
        """

        self._filterables = filterables

    @property
    def sorts(self):
        """Gets the sorts of this ResultMakerWithIdVisConfigAndDynamicFields.  # noqa: E501

        Sorts of the constituent Look, Query, or Merge Query  # noqa: E501

        :return: The sorts of this ResultMakerWithIdVisConfigAndDynamicFields.  # noqa: E501
        :rtype: str
        """
        return self._sorts

    @sorts.setter
    def sorts(self, sorts):
        """Sets the sorts of this ResultMakerWithIdVisConfigAndDynamicFields.

        Sorts of the constituent Look, Query, or Merge Query  # noqa: E501

        :param sorts: The sorts of this ResultMakerWithIdVisConfigAndDynamicFields.  # noqa: E501
        :type: str
        """

        self._sorts = sorts

    @property
    def merge_result_id(self):
        """Gets the merge_result_id of this ResultMakerWithIdVisConfigAndDynamicFields.  # noqa: E501

        ID of merge result if this is a merge_result.  # noqa: E501

        :return: The merge_result_id of this ResultMakerWithIdVisConfigAndDynamicFields.  # noqa: E501
        :rtype: str
        """
        return self._merge_result_id

    @merge_result_id.setter
    def merge_result_id(self, merge_result_id):
        """Sets the merge_result_id of this ResultMakerWithIdVisConfigAndDynamicFields.

        ID of merge result if this is a merge_result.  # noqa: E501

        :param merge_result_id: The merge_result_id of this ResultMakerWithIdVisConfigAndDynamicFields.  # noqa: E501
        :type: str
        """

        self._merge_result_id = merge_result_id

    @property
    def total(self):
        """Gets the total of this ResultMakerWithIdVisConfigAndDynamicFields.  # noqa: E501

        Total of the constituent Look, Query, or Merge Query  # noqa: E501

        :return: The total of this ResultMakerWithIdVisConfigAndDynamicFields.  # noqa: E501
        :rtype: bool
        """
        return self._total

    @total.setter
    def total(self, total):
        """Sets the total of this ResultMakerWithIdVisConfigAndDynamicFields.

        Total of the constituent Look, Query, or Merge Query  # noqa: E501

        :param total: The total of this ResultMakerWithIdVisConfigAndDynamicFields.  # noqa: E501
        :type: bool
        """

        self._total = total

    @property
    def query_id(self):
        """Gets the query_id of this ResultMakerWithIdVisConfigAndDynamicFields.  # noqa: E501

        ID of query if this is a query.  # noqa: E501

        :return: The query_id of this ResultMakerWithIdVisConfigAndDynamicFields.  # noqa: E501
        :rtype: int
        """
        return self._query_id

    @query_id.setter
    def query_id(self, query_id):
        """Sets the query_id of this ResultMakerWithIdVisConfigAndDynamicFields.

        ID of query if this is a query.  # noqa: E501

        :param query_id: The query_id of this ResultMakerWithIdVisConfigAndDynamicFields.  # noqa: E501
        :type: int
        """

        self._query_id = query_id

    @property
    def query(self):
        """Gets the query of this ResultMakerWithIdVisConfigAndDynamicFields.  # noqa: E501


        :return: The query of this ResultMakerWithIdVisConfigAndDynamicFields.  # noqa: E501
        :rtype: Query
        """
        return self._query

    @query.setter
    def query(self, query):
        """Sets the query of this ResultMakerWithIdVisConfigAndDynamicFields.


        :param query: The query of this ResultMakerWithIdVisConfigAndDynamicFields.  # noqa: E501
        :type: Query
        """

        self._query = query

    @property
    def vis_config(self):
        """Gets the vis_config of this ResultMakerWithIdVisConfigAndDynamicFields.  # noqa: E501

        Vis config of the constituent Query, or Merge Query.  # noqa: E501

        :return: The vis_config of this ResultMakerWithIdVisConfigAndDynamicFields.  # noqa: E501
        :rtype: str
        """
        return self._vis_config

    @vis_config.setter
    def vis_config(self, vis_config):
        """Sets the vis_config of this ResultMakerWithIdVisConfigAndDynamicFields.

        Vis config of the constituent Query, or Merge Query.  # noqa: E501

        :param vis_config: The vis_config of this ResultMakerWithIdVisConfigAndDynamicFields.  # noqa: E501
        :type: str
        """

        self._vis_config = vis_config

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ResultMakerWithIdVisConfigAndDynamicFields, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ResultMakerWithIdVisConfigAndDynamicFields):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
